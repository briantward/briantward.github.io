<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Everyday Linux</title>
    <link>https://briantward.github.io/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Everyday Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Dec 2018 00:00:00 +0000</lastBuildDate>
    
      <atom:link href="https://briantward.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>OpenShift Remove Stuck ServiceInstance</title>
        <link>https://briantward.github.io/openshift-remove-stuck-serviceinstance/</link>
        <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/openshift-remove-stuck-serviceinstance/</guid>
        <description>OpenShift Remove Stuck ServiceInstance To delete a stuck serviceinstance where a project namespace no longer exists:
 $ oc get serviceinstance --all-namespaces -o wide NAMESPACE NAME CLASS PLAN STATUS AGE test cakephp-mysql-example-vfzkq ClusterServiceClass/cakephp-mysql-example default Failed 113d test cakephp-mysql-persistent-f75gl ClusterServiceClass/cakephp-mysql-persistent default Failed 113d webconsole-extensions httpd-example-6fxx5 ClusterServiceClass/httpd-example default DeprovisionCallFailed 10d    Create the project namespace again
$ oc new-project test     Now delete the serviceinstance
$ oc delete serviceinstance test -n cakephp-mysql-example-vfzkq     If that doesnâ€™t delete it, then remove the finalizer</description>
      </item>
    
      <item>
        <title>Custom OpenShift 4 Ingress Router</title>
        <link>https://briantward.github.io/custom-openshift-4-ingress-router/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/custom-openshift-4-ingress-router/</guid>
        <description>Custom OpenShift 4 Ingress Router This solution is incomplete and is mostly scratch notes. This design is NOT supported by Red Hat! Use at your own risk.
  Create custom HAProxy Template
  Create a ConfigMap From the HAProxy Template (these are incomplete Ansible tasks/plays)
   - name: slurp slurp: src: template file register: haproxy-template - name: k8s: state: present namespace: openshift-ingress definition: apiVersion: v1 kind: ConfigMap metadata: name: haproxy-template data: haproxy-config.</description>
      </item>
    
  </channel>
</rss>
