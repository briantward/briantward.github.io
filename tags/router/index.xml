<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>router on Everyday Linux</title>
    <link>https://briantward.github.io/tags/router/</link>
    <description>Recent content in router on Everyday Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Jan 2021 00:00:00 +0000</lastBuildDate>
    
      <atom:link href="https://briantward.github.io/tags/router/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>DD-WRT Custom Certificate</title>
        <link>https://briantward.github.io/dd-wrt-certificate/</link>
        <pubDate>Sat, 09 Jan 2021 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/dd-wrt-certificate/</guid>
        <description>DD-WRT Custom Certificate (Tested on R7000)
 Install acme.sh or other system for creating certs every 30 days from Let’s Encrypt.
 On your router, plug in an empty USB drive, FAT or ext3/4 formatted.
 In the router GUI go to Services &amp;gt; USB:
 Select the following
   Core USB Support: Enabled
  USB Storage Support: Enabled
  Automatic Drive Mount: Enabled
   Click Apply Settings</description>
      </item>
    
      <item>
        <title>RHEL Port Forwarding Using Firewalld</title>
        <link>https://briantward.github.io/rhel-port-forwarding.adoc/</link>
        <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/rhel-port-forwarding.adoc/</guid>
        <description>RHEL Port Forwarding Using Firewalld Never underestimate the simplicity of a feature and the complications of a network.
 RHEL 7 uses firewalld, which has a very simple syntax for port forwarding across the incoming port of an external interface to a NATed IP on an internal device. No matter what I tried in variations from the base documentation I simply could not get it to work.
 In this configuration, note that I have eth0 on NetworkManager external zone with masquerade and eth1 on zone internal.</description>
      </item>
    
      <item>
        <title>Build A Router</title>
        <link>https://briantward.github.io/build-a-router/</link>
        <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/build-a-router/</guid>
        <description>Build A Router on Red Hat Enterprise Linux 7 This provided a nice resource for reference.[1] I will elaborate a litte more here. I wanted to set up a custom router to the internet, to provide advanced firewall and logging features. Note that this example does not provide DHCP services. In my case, I have a secondary off-the-shelf (OTS) router doing that. Since the OTS router did not offer advanced firewall, NAT, port-forwarding, and such features, I decided to build my own.</description>
      </item>
    
      <item>
        <title>OpenShift Router Quick Links</title>
        <link>https://briantward.github.io/openshift-router/</link>
        <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/openshift-router/</guid>
        <description>OpenShift Router quick links router balancing
 router environment variables
   https://docs.openshift.com/container-platform/3.7/architecture/networking/routes.html#env-variables
  https://docs.openshift.com/container-platform/3.6/architecture/networking/routes.html#load-balancing
  https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html#route-specific-annotations
  https://docs.openshift.com/container-platform/3.7/architecture/networking/routes.html#routes-sticky-sessions
  https://docs.openshift.com/container-platform/3.7/dev_guide/routes.html#dev-guide-routes-allowing-endpoints-to-control-cookies
   passthrough
   https://github.com/openshift/origin/commit/a4815c6314f9df1d2ce8060216d0924181c48b6c Changed the router default to roundrobin if non-zero weights are used https://bugzilla.redhat.com/show_bug.cgi?id=1416869
   stick sessions in haproxy
   https://www.haproxy.com/blog/load-balancing-affinity-persistence-sticky-sessions-what-you-need-to-know/
  http://www.haproxy.org/download/1.8/doc/configuration.txt (3.11)
   kubernetes service
   https://kubernetes.io/docs/concepts/services-networking/service/</description>
      </item>
    
      <item>
        <title>OpenShift Update Router Fix</title>
        <link>https://briantward.github.io/openshift-update-router-fix/</link>
        <pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/openshift-update-router-fix/</guid>
        <description>OpenShift Update Router Fix Updating from v3.11.0 to v3.11.51 introduced a new volume mount on the router that did not previously exist (or maybe something wonky just happened in my cluster).
 Log message on router pod attempting to spin up. If you don’t have one attempting to spin up now (i.e. it failed a while back and just rolled back to the previous ReplicationController), delete the latest ReplicationController (not the one running the good pods!</description>
      </item>
    
      <item>
        <title>Custom OpenShift 4 Ingress Router</title>
        <link>https://briantward.github.io/custom-openshift-4-ingress-router/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/custom-openshift-4-ingress-router/</guid>
        <description>Custom OpenShift 4 Ingress Router This solution is incomplete and is mostly scratch notes. This design is NOT supported by Red Hat! Use at your own risk.
  Create custom HAProxy Template
  Create a ConfigMap From the HAProxy Template (these are incomplete Ansible tasks/plays)
   - name: slurp slurp: src: template file register: haproxy-template - name: k8s: state: present namespace: openshift-ingress definition: apiVersion: v1 kind: ConfigMap metadata: name: haproxy-template data: haproxy-config.</description>
      </item>
    
  </channel>
</rss>
