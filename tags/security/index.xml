<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Everyday Linux</title>
    <link>https://briantward.github.io/tags/security/</link>
    <description>Recent content in security on Everyday Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Jun 2023 00:00:00 +0000</lastBuildDate>
    
      <atom:link href="https://briantward.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>OpenShift SecurityContextConstraints (SCC)</title>
        <link>https://briantward.github.io/scc/</link>
        <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/scc/</guid>
        <description>OpenShift SecurityContextConstraints (SCC) It’s recommended to use RBAC to provide access to existing SCCs.
 Using # oc adm policy add-scc-to-user anyuid -z useroot will create a rolebinding to a role granting access to modify the SCC (this was changed from directly adding users/groups to the SCC object itself in earlier versions of OpenShift). Note that the -n for namespace is not acknowledged correctly for this command at this time (2023-06-10, TODO: file an issue or fix the code), so you should be in the namespace of the serviceaccount to make this work correctly.</description>
      </item>
    
      <item>
        <title>Keycloak and oauth2-proxy</title>
        <link>https://briantward.github.io/keycloak-oauth2-proxy/</link>
        <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/keycloak-oauth2-proxy/</guid>
        <description>Keycloak and oauth2-proxy Using the Keycloak Docker image:
 https://hub.docker.com/r/jboss/keycloak/
 To run Keycloak:
 podman run -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8443:8443 --volume /home/bward/keycloak/certs:/etc/x509/https --volume /home/bward/keycloak/data:/opt/jboss/keycloak/standalone/data jboss/keycloak   To increase the debug/trace loglevel, use KEYCLOAK_LOGLEVEL=ALL
 podman run -e KEYCLOAK_LOGLEVEL=ALL -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin -p 8443:8443 --volume /home/bward/keycloak/certs:/etc/x509/https --volume /home/bward/keycloak/data:/opt/jboss/keycloak/standalone/data jboss/keycloak   To run the oauth2-proxy
 podman run --volume /home/bward/oauth-proxy-my-app/oauth2-proxy.cfg:/etc/oauth2-proxy.cfg --volume /home/bward/oauth-proxy-my-app/certs:/etc/x509 -p 4180:4180 oauth2-proxy/oauth2-proxy:latest --config=/etc/oauth2-proxy.cfg   Oauth2-proxy has very little information in logging.</description>
      </item>
    
      <item>
        <title>Running Secure Containers on Fedora 31 and RHEL 8</title>
        <link>https://briantward.github.io/running-secure-containers-on-fedora/</link>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/running-secure-containers-on-fedora/</guid>
        <description>Running Secure Containers on Fedora 31 and RHEL 8 The first thing to note here, is that &amp;#34;secured&amp;#34; means running the container with SELinux enforcing. If you don’t care about SELinux or have other alternatives in place, move along here, as you won’t find this useful. I will not be discussing application security or platform security.
 The second thing to note here, is that setting this up requires more work, per container, than running your container on OpenShift, which is Red Hat’s Container platform built on Kubernetes.</description>
      </item>
    
      <item>
        <title>Security Pipelines in OpenShift Container Platform</title>
        <link>https://briantward.github.io/security-pipelines/</link>
        <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
        <guid>https://briantward.github.io/security-pipelines/</guid>
        <description>Security Pipelines in OpenShift Container Platform These are random notes for work in progress coded at https://github.com/briantward/container-pipelines/tree/parallel-spring-boot
 - two OCP clusters: nonprod (dev, test, etc) and prod (prod, stage) - allow nonprod cluster to continue pulling image updates automatically to registry - have separate registries between nonprod and prod - new builds only happen in nonprod, never in prod - existing dev pipeline must be aware of possible update to deployed container by alternative parallel pipeline route and keep base image in sync - new security pipeline, parallel to existing dev pipeline: -- poll for updates to images in nonprod cluster --- polling will check similar to what happens when the nonprod cluster syncs from RH Registry --- can we capture a log of the updates from RH registry and just act on them?</description>
      </item>
    
      <item>
        <title>Securing Red Hat JBoss Web Server 3.X</title>
        <link>https://briantward.github.io/jws-secured/</link>
        <pubDate>Thu, 29 Jun 2017 12:00:00 -0400</pubDate>
        <guid>https://briantward.github.io/jws-secured/</guid>
        <description>Securing Red Hat JBoss Web Server 3.X (configured on 3.0.3 but should be good for 3.1 as well)
 THIS CONFIGURATION HAS NOT BEEN TESTED! THIS IS INTENDED AS A STARTING GUIDE ONLY.
 RPM Base Installation  Register your machine if you have not done so.
# subscription-manager register     List the available subscriptions you have. Look for the Pool ID of your JBoss Web Server subscription</description>
      </item>
    
  </channel>
</rss>
